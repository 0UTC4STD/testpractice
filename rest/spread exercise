function filterOutOdds() {
  var nums = Array.prototype.slice.call(arguments);
  return nums.filter(function(num) {
    return num % 2 === 0
  });
}
const filterOutOdds =(nums) => nums.filter(num => num % 2 === 0)

// function findMin (...arr){
// return Math.min(...arr)
// };
 const findMin = (...arr) =>Math.min(...arr)

const mergeObjects = (x,y) => ({...x, ...y}) 

const doubleAndReturnArgs= (arr, ...str) => [...arr, ...str.map(x => x*2)]


/** remove a random element in the items array
and return a new array without that item. */

const removeRandom(items)=> {
 let x 
}

/** Return a new array with every item in array1 and array2. */

const extend= (array1, array2)=> {
    return [...array1, ...array2];
}

/** Return a new object with all the keys and values
from obj and a new key/value pair */

const addKeyVal=(obj, key, val)=> {
    let new1 = {...obj}
    new1[key] = val
    return new1;
}


/** Return a new object with a key removed. */

const removeKey=(obj, key)=> {
    delete obj[key]
    return {...obj};
}


/** Combine two objects and return a new object. */

const combine=(obj1, obj2)=> {
return {...obj1, ...obj2}
}


/** Return a new object with a modified key and value. */

const update=(obj, key, val)=>{
    let new2 = {...obj}
    new2[key]= val
    return new2;
}